#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

sem_t chopsticks[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *(int *)arg;

    printf("Philosopher %d is thinking.\n", id);
    sleep(1);

    // Pick up chopsticks
    sem_wait(&chopsticks[id]);
    sem_wait(&chopsticks[(id + 1) % NUM_PHILOSOPHERS]);

    // Eating
    printf("Philosopher %d is eating.\n", id);
    sleep(2);

    // Put down chopsticks
    sem_post(&chopsticks[id]);
    sem_post(&chopsticks[(id + 1) % NUM_PHILOSOPHERS]);

    printf("Philosopher %d finished eating and is thinking again.\n", id);
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    // Initialize semaphores
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&chopsticks[i], 0, 1);
        ids[i] = i;
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy semaphores
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&chopsticks[i]);
    }

    return 0;
}
