#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

void calculateTimes(struct Process processes[], int n) {
    int completed = 0, current_time = 0, min_index;
    int is_completed[n];

    for (int i = 0; i < n; i++) {
        is_completed[i] = 0;
    }

    while (completed != n) {
        min_index = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && !is_completed[i]) {
                if (min_index == -1 || processes[i].burst_time < processes[min_index].burst_time) {
                    min_index = i;
                }
            }
        }

        if (min_index == -1) {
            current_time++;
        } else {
            current_time += processes[min_index].burst_time;
            processes[min_index].turnaround_time = current_time - processes[min_index].arrival_time;
            processes[min_index].waiting_time =
                processes[min_index].turnaround_time - processes[min_index].burst_time;

            is_completed[min_index] = 1;
            completed++;
        }
    }
}

void printResults(struct Process processes[], int n) {
    printf("\nPID\tAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }

    calculateTimes(processes, n);
    printResults(processes, n);

    return 0;
}
