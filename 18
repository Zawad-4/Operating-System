#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* param) {
    int item;
    while (1) {
        item = rand() % 100; // Produce an item
        sem_wait(&empty); // Decrease the empty semaphore
        pthread_mutex_lock(&mutex); // Critical section

        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        printf("Producer produced: %d\n", item);

        pthread_mutex_unlock(&mutex); // End critical section
        sem_post(&full); // Increase the full semaphore
        sleep(1); // Simulate time taken to produce an item
    }
}

void* consumer(void* param) {
    int item;
    while (1) {
        sem_wait(&full); // Decrease the full semaphore
        pthread_mutex_lock(&mutex); // Critical section

        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        printf("Consumer consumed: %d\n", item);

        pthread_mutex_unlock(&mutex); // End critical section
        sem_post(&empty); // Increase the empty semaphore
        sleep(1); // Simulate time taken to consume an item
    }
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, BUFFER_SIZE); // Set the empty semaphore to the buffer size
    sem_init(&full, 0, 0); // Set the full semaphore to 0
    pthread_mutex_init(&mutex, NULL); // Initialize mutex

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
