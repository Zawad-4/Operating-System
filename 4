#include <stdio.h>

struct Process {
    int pid;         // Process ID
    int burstTime;   // Burst Time
    int waitTime;    // Waiting Time
    int turnAroundTime; // Turnaround Time
    int isCompleted; // Completion flag
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        int shortest = -1;
        int minBurstTime = 9999;

        // Find the process with the shortest burst time that is not completed
        for (int i = 0; i < n; i++) {
            if (!processes[i].isCompleted && processes[i].burstTime < minBurstTime) {
                minBurstTime = processes[i].burstTime;
                shortest = i;
            }
        }

        // Process the selected process
        if (shortest != -1) {
            processes[shortest].waitTime = currentTime;
            currentTime += processes[shortest].burstTime;
            processes[shortest].turnAroundTime = currentTime;
            processes[shortest].isCompleted = 1;
            completed++;
        }
    }
}

void printTable(struct Process processes[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", 
            processes[i].pid, 
            processes[i].burstTime, 
            processes[i].waitTime, 
            processes[i].turnAroundTime);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst times for processes
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].isCompleted = 0; // Mark process as not completed
    }

    // Calculate waiting and turnaround times
    calculateTimes(processes, n);

    // Print process information
    printf("\nProcess Execution Details:\n");
    printTable(processes, n);

    // Calculate and display average waiting and turnaround times
    float totalWaitTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitTime += processes[i].waitTime;
        totalTurnAroundTime += processes[i].turnAroundTime;
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnAroundTime / n);

    return 0;
}
