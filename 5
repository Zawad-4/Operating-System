#include <stdio.h>

struct Process {
    int pid;          // Process ID
    int burstTime;    // Burst Time
    int priority;     // Priority (lower value means higher priority)
    int waitTime;     // Waiting Time
    int turnAroundTime; // Turnaround Time
    int isCompleted;  // Completion flag
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        int highestPriority = -1;
        int minPriority = 9999;

        // Find the process with the highest priority that is not completed
        for (int i = 0; i < n; i++) {
            if (!processes[i].isCompleted && processes[i].priority < minPriority) {
                minPriority = processes[i].priority;
                highestPriority = i;
            }
        }

        // Process the selected process
        if (highestPriority != -1) {
            processes[highestPriority].waitTime = currentTime;
            currentTime += processes[highestPriority].burstTime;
            processes[highestPriority].turnAroundTime = currentTime;
            processes[highestPriority].isCompleted = 1;
            completed++;
        }
    }
}

void printTable(struct Process processes[], int n) {
    printf("PID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",
            processes[i].pid,
            processes[i].burstTime,
            processes[i].priority,
            processes[i].waitTime,
            processes[i].turnAroundTime);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst times and priorities for processes
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for Process %d (lower value means higher priority): ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].isCompleted = 0; // Mark process as not completed
    }

    // Calculate waiting and turnaround times
    calculateTimes(processes, n);

    // Print process information
    printf("\nProcess Execution Details:\n");
    printTable(processes, n);

    // Calculate and display average waiting and turnaround times
    float totalWaitTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitTime += processes[i].waitTime;
        totalTurnAroundTime += processes[i].turnAroundTime;
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnAroundTime / n);

    return 0;
}
