#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
};

void calculateTimes(struct Process processes[], int n) {
    int completed = 0, current_time = 0, min_priority_index = -1;

    while (completed != n) {
        min_priority_index = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time &&
                processes[i].remaining_time > 0 &&
                (min_priority_index == -1 || processes[i].priority < processes[min_priority_index].priority)) {
                min_priority_index = i;
            }
        }

        if (min_priority_index == -1) {
            current_time++;
            continue;
        }

        processes[min_priority_index].remaining_time--;
        current_time++;

        if (processes[min_priority_index].remaining_time == 0) {
            completed++;
            int completion_time = current_time;
            processes[min_priority_index].turnaround_time = completion_time - processes[min_priority_index].arrival_time;
            processes[min_priority_index].waiting_time =
                processes[min_priority_index].turnaround_time - processes[min_priority_index].burst_time;
        }
    }
}

void printResults(struct Process processes[], int n) {
    printf("\nPID\tPriority\tAT\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t%d\t%d\t%d\n",
               processes[i].id, processes[i].priority, processes[i].arrival_time,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    calculateTimes(processes, n);
    printResults(processes, n);

    return 0;
}
