#include <stdio.h>

struct Process {
    int pid;       // Process ID
    int burstTime; // Burst Time
    int waitTime;  // Waiting Time
    int turnAroundTime; // Turnaround Time
};

void calculateTimes(struct Process processes[], int n) {
    // Calculate Waiting Time for each process
    processes[0].waitTime = 0; // First process has no waiting time
    for (int i = 1; i < n; i++) {
        processes[i].waitTime = processes[i - 1].waitTime + processes[i - 1].burstTime;
    }

    // Calculate Turnaround Time for each process
    for (int i = 0; i < n; i++) {
        processes[i].turnAroundTime = processes[i].waitTime + processes[i].burstTime;
    }
}

void printTable(struct Process processes[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", 
            processes[i].pid, 
            processes[i].burstTime, 
            processes[i].waitTime, 
            processes[i].turnAroundTime);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst times for processes
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Calculate waiting and turnaround times
    calculateTimes(processes, n);

    // Print process information
    printf("\nProcess Execution Details:\n");
    printTable(processes, n);

    // Calculate and display average waiting and turnaround times
    float totalWaitTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < n; i++) {
        totalWaitTime += processes[i].waitTime;
        totalTurnAroundTime += processes[i].turnAroundTime;
    }

    printf("\nAverage Waiting Time: %.2f\n", totalWaitTime / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnAroundTime / n);

    return 0;
}
